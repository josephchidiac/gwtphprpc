#summary How to install the sample application
#sidebar SideBarPage

<wiki:toc max_depth="2"/>

= Developer requirements =
This tutorial requires at least a basic knowledge of GWT. It is recommended to complete the [http://code.google.com/webtoolkit/doc/latest/tutorial/index.html GWT tutorial] before starting this one.
= System requirements =
PhpRpcGen has been installed and tested with the following configuration:
  * GWT 2.0.4
  * PHP 5.3.1
The following step by step explanation is using [http://www.eclipse.org eclipse] and the [http://code.google.com/eclipse/index.html Google Plugin], yet *there is no dependency between PhpRpcGen and eclipse*.
= Details =
==Creating a project==
First wou need to create a GWT project.

http://gwtphprpc.googlecode.com/files/step1.png

==Cleaning the sample project==
You can then delete the following classes which contains the java source code for the default sample GWT application:
  * GreetingService
  * GreetingServiceAsync
  * GreetingServiceImpl
  * FieldVerifier

Then, open the war/WEB-INF/web.xml file and modify it so that it looks like this:
{{{
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE web-app
    PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
    "http://java.sun.com/dtd/web-app_2_3.dtd">
<web-app>
  <!-- Default page to serve -->
  <welcome-file-list>
    <welcome-file>GwtPhpRpcSample.html</welcome-file>
  </welcome-file-list>

</web-app>
}}}

Open the java class GwtPhpRpcSample and modify it (erasing most of the content) so that it looks like this:
{{{
package com.test.client;

import com.google.gwt.core.client.EntryPoint;

public class GwtPhpRpcSample implements EntryPoint {
	public void onModuleLoad() {
	}
}
}}}

You should not see any remaining error in eclipse.

==Writting the PHP RPC configuration file==

Creates a directory "rpc" at the root of the project. Then creates an XML file "config.xml" in this directory.
Your project view should now looks like this:

http://gwtphprpc.googlecode.com/files/step2.png

Open the XML file and paste the following code in it, then save:
{{{
<?xml version="1.0" encoding="UTF-8"?>
<config>
	<transfer_objects package="com.test.client.to">
		<object name="Person">
			<attribute name="firstName" type="String"/>
			<attribute name="lastName" type="String"/>
			<attribute name="fullName" type="String"/>
			<attribute name="age" type="int"/>
			<attribute name="size" type="double"/>
			<attribute name="skills" type="String[]"/>
			<attribute name="childrenAges" type="int[]"/>
			<attribute name="hobby" type="Hobby"/>
			<attribute name="contacts" type="Contact[]"/>
			<attribute name="smart" type="boolean"/>
		</object>
		<object name="Hobby">
			<attribute name="description" type="String"/>
		</object>
		<object name="Contact">
			<attribute name="identity" type="String"/>
		</object>
	</transfer_objects>
	<remote_services class="com.pyc.test.MyRemoteService">
		<service method="getPersons">
			<result type="Person[]"/>
		</service>
		<service method="modifyPerson">
			<params type="Person"/>
			<result type="Person"/>
		</service>
	</remote_services>
</config>
}}}

This code defines:
  * 3 transfer objects (data structure which are used to convey data accross the network)
    * Person
    * Hobby
    * Contact
  * 2 remote service (methods to be implemented in PHP and exposing remote features to GWT client)
    * getPersons (taking no parameters and returning an array of Person)
    * modifyPerson (which has a Person object as parameter and as result)

==Installing the generator==

