#summary How to install the sample application
#sidebar SideBarPage

<wiki:toc max_depth="2"/>

= Developer requirements =
This tutorial requires at least a basic knowledge of GWT. It is recommended to complete the [http://code.google.com/webtoolkit/doc/latest/tutorial/index.html GWT tutorial] before starting this one.
It is also assumed that you are familiar with PHP/Apache server configuration.

= System requirements =
PhpRpcGen has been installed and tested with the following configuration:
  * GWT 2.0.4
  * PHP 5.3.1
The following step by step explanation is using [http://www.eclipse.org eclipse] and the [http://code.google.com/eclipse/index.html Google Plugin], yet *there is no dependency between PhpRpcGen and eclipse*.
= Details =
==Creating a project==
First wou need to create a GWT project.

http://gwtphprpc.googlecode.com/files/step1.png

==Cleaning the sample project==
You can then delete the following classes which contains the java source code for the default sample GWT application:
  * GreetingService
  * GreetingServiceAsync
  * GreetingServiceImpl
  * FieldVerifier

Then, open the war/WEB-INF/web.xml file and modify it so that it looks like this:
{{{
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE web-app
    PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
    "http://java.sun.com/dtd/web-app_2_3.dtd">
<web-app>
  <!-- Default page to serve -->
  <welcome-file-list>
    <welcome-file>GwtPhpRpcSample.html</welcome-file>
  </welcome-file-list>

</web-app>
}}}

Open the java class GwtPhpRpcSample and modify it (erasing most of the content) so that it looks like this:
{{{
package com.test.client;

import com.google.gwt.core.client.EntryPoint;

public class GwtPhpRpcSample implements EntryPoint {
	public void onModuleLoad() {
	}
}
}}}

You should not see any remaining error in eclipse.

==Setting up your web server==
Configure your apache server so that "http://localhost/gwtphprpc/" will point to the content of the "war" folder. This is where we'll set the PHP files.

NB: I am commonly using [http://www.apachefriends.org/en/xampp.html XAMPP] as a PHP development environment. Try it !

==Writting the PHP RPC configuration file==

Creates a directory "rpc" at the root of the project. Then creates an XML file "config.xml" in this directory.
Your project view should now looks like this:

http://gwtphprpc.googlecode.com/files/step2.png

Open the XML file and paste the following code in it, then save:
{{{
<?xml version="1.0" encoding="UTF-8"?>
<config>
	<transfer_objects package="com.test.client.to">
		<object name="Person">
			<attribute name="firstName" type="String"/>
			<attribute name="lastName" type="String"/>
			<attribute name="fullName" type="String"/>
			<attribute name="age" type="int"/>
			<attribute name="size" type="double"/>
			<attribute name="skills" type="String[]"/>
			<attribute name="childrenAges" type="int[]"/>
			<attribute name="hobby" type="Hobby"/>
			<attribute name="contacts" type="Contact[]"/>
			<attribute name="smart" type="boolean"/>
		</object>
		<object name="Hobby">
			<attribute name="description" type="String"/>
		</object>
		<object name="Contact">
			<attribute name="identity" type="String"/>
		</object>
	</transfer_objects>
	<remote_services class="com.test.client.MyRemoteService">
		<service method="getPersons">
			<result type="Person[]"/>
		</service>
		<service method="modifyPerson">
			<params type="Person"/>
			<result type="Person"/>
		</service>
	</remote_services>
</config>
}}}

This code defines:
  * 3 transfer objects (data structure which are used to convey data accross the network)
    * Person
    * Hobby
    * Contact
  * 2 remote service (methods to be implemented in PHP and exposing remote features to GWT client)
    * getPersons (taking no parameters and returning an array of Person)
    * modifyPerson (which has a Person object as parameter and as result)

*NB: please note the target java package "com.test.client.to" for the
transfer objects and "com.test.client" for the remote service. 
They match the package defined when we created the project. If you have chosen another package for the project then you'll need to modify the sample "config.xml" file.*

==Running the generator==
===Installing the generator===
Creates a "lib" directory within the "rpc" directory that you previously created.
Download the binary distribution of the generator (available there).
And unzip it into a "lib" directory.
===Creating the XML configuration file===
Then creates a "build.xml" (the [http://ant.apache.org ANT]) file into the "rpc" directory.
Open it, paste the following code and save:
{{{
<project name="PhpRPCGenerator" default="main" basedir=".">
  <taskdef name="rpcgen" classname="com.pycloux.phpgen.PhpRpcGenTask"/>
  <target name="main">
    <rpcgen
    	configFilePath="config.xml"
    	javaSourcePath="../src"
    	phpSourcePath="../war"
    	keepServerCode="true"
    />
  </target>
</project>
}}}

You can probably easily understand the meaning of the ANT task configuration:
  * configFilePath: relative path to the XML configuration file
  * javaSourcePath: relative path to the java source code directory
  * phpSourcePath: relative path to the PHP source code directory
  * keepServerCode: if true, the generator will take care to not overwrite the implementation code of the PHP remote service (see later)

===Configuring and running the ANT task===
Then right click on the "build.xml" file (the ANT one) and select "Run As > Ant build".
The console will display:
{{{
BUILD FAILED
}}}
That's normal, no worry.

Then open the eclipse ANT configuration tool.
In the menu bar select "Run > External tools > External tools configuration...".
This will open a window like this:

http://gwtphprpc.googlecode.com/files/step3.png

The attempt to run ANT (even if it resulted in a "BUILD FAILED") created a run configuration named "GwtPhpRpcSample build.xml".
Clicks on the "classpath" tab and add all the jars of the rpc/lib directory.

Your "classpath" tab should now look like this:

http://gwtphprpc.googlecode.com/files/step4.png

Then click on the "Run" button to trigger the code generation (which should end with a "BUILD SUCCESSFUL" now).

==Adding a bit of code==
===A bunch of generated code===
Your project space (after a F5 refresh) now contains a lot of newly generated files:

http://gwtphprpc.googlecode.com/files/step5.png

Some Java files have been generated in the "src" directory and some PHP files in the "war" directory.
 
===Coding the GWT client===
It is now time to code my GWT client.
====Modifying the GWT module configuration===
First open the "GwtPhpRpcSample.gwt.xml" file and add the following code in the module configuration:
{{{
  <inherits name='com.google.gwt.http.HTTP' />
  <inherits name='com.google.gwt.json.JSON' />
}}}

These two "imports" are required for the RPC mechanism to work. Remember that it is based upon JSON-RPC (over HTTP obviously).
===Adding the client side code===